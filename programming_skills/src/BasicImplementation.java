public class BasicImplementation {

    public BasicImplementation() {
    }

    /**
     * You are given two strings word1 and word2.
     * Merge the strings by adding letters in alternating order, starting with word1.
     * If a string is longer than the other, append the additional letters onto the
     * end of the merged string.
     * <p>
     * Input: word1 = "abc", word2 = "pqr"
     * Output: "apbqcr"
     *
     * @param word1
     * @param word2
     * @return
     */
    public String mergeStringAlternately(String word1, String word2) {
        StringBuilder finalString = new StringBuilder();
        int str1Length = word1.length();
        int str2Length = word2.length();
        int wordLength = Math.max(str1Length, str2Length);

        for (int i = 0; i < wordLength; i++) {

            if (i < str1Length) {
                finalString.append(word1.charAt(i));
            }

            if (i < str2Length) {
                finalString.append(word2.charAt(i));
            }
        }

        System.out.println("Word 1: " + word1 + " Word 2: " + word2 + " Final String: " + finalString);
        return finalString.toString();
    }

    /**
     * You are given two strings s and t.
     * String t is generated by random shuffling string s and then add one more letter at a random position.
     * Return the letter that was added to t.
     * <p>
     * Input: s = "abcd", t = "abcde"
     * Output: "e"
     *
     * @param s
     * @param t
     * @return
     */
    public char findTheDifference(String s, String t) {
        for (char ch : s.toCharArray()) {
            for(char c : t.toCharArray()) {
                if(ch == c ) {
                    String word = t.substring(0,t.indexOf(ch)) + t.substring(t.indexOf(ch) + 1);
                    t = word;
                    break;
                }
            }

        }
        return t.charAt(0);

        /**
         * Faster Solution
         *
         *  public char findTheDifference(String s, String t) {
         *         char c = 0;
         *         for(char cs : s.toCharArray())  c ^= cs;
         *         for(char ct : t.toCharArray())  c ^= ct;
         *         return c;
         *     }
         */
    }


}
